// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWorkspaceDevices(t *testing.T) {
	t.Parallel()

	query := WorkspaceDevices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWorkspaceDevicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkspaceDevicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WorkspaceDevices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkspaceDevicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkspaceDeviceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWorkspaceDevicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WorkspaceDeviceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WorkspaceDevice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WorkspaceDeviceExists to return true, but got false.")
	}
}

func testWorkspaceDevicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	workspaceDeviceFound, err := FindWorkspaceDevice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if workspaceDeviceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWorkspaceDevicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WorkspaceDevices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWorkspaceDevicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WorkspaceDevices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWorkspaceDevicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	workspaceDeviceOne := &WorkspaceDevice{}
	workspaceDeviceTwo := &WorkspaceDevice{}
	if err = randomize.Struct(seed, workspaceDeviceOne, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}
	if err = randomize.Struct(seed, workspaceDeviceTwo, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workspaceDeviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workspaceDeviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkspaceDevices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWorkspaceDevicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	workspaceDeviceOne := &WorkspaceDevice{}
	workspaceDeviceTwo := &WorkspaceDevice{}
	if err = randomize.Struct(seed, workspaceDeviceOne, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}
	if err = randomize.Struct(seed, workspaceDeviceTwo, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = workspaceDeviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = workspaceDeviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func workspaceDeviceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func workspaceDeviceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WorkspaceDevice) error {
	*o = WorkspaceDevice{}
	return nil
}

func testWorkspaceDevicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WorkspaceDevice{}
	o := &WorkspaceDevice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice object: %s", err)
	}

	AddWorkspaceDeviceHook(boil.BeforeInsertHook, workspaceDeviceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceBeforeInsertHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.AfterInsertHook, workspaceDeviceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceAfterInsertHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.AfterSelectHook, workspaceDeviceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceAfterSelectHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.BeforeUpdateHook, workspaceDeviceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceBeforeUpdateHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.AfterUpdateHook, workspaceDeviceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceAfterUpdateHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.BeforeDeleteHook, workspaceDeviceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceBeforeDeleteHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.AfterDeleteHook, workspaceDeviceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceAfterDeleteHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.BeforeUpsertHook, workspaceDeviceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceBeforeUpsertHooks = []WorkspaceDeviceHook{}

	AddWorkspaceDeviceHook(boil.AfterUpsertHook, workspaceDeviceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	workspaceDeviceAfterUpsertHooks = []WorkspaceDeviceHook{}
}

func testWorkspaceDevicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkspaceDevicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(workspaceDeviceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWorkspaceDeviceToOneDeviceUsingDevice(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WorkspaceDevice
	var foreign Device

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DeviceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Device().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WorkspaceDeviceSlice{&local}
	if err = local.L.LoadDevice(ctx, tx, false, (*[]*WorkspaceDevice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Device == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Device = nil
	if err = local.L.LoadDevice(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Device == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkspaceDeviceToOneWorkspaceUsingWorkspace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local WorkspaceDevice
	var foreign Workspace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, workspaceDBTypes, false, workspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workspace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WorkspaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Workspace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WorkspaceDeviceSlice{&local}
	if err = local.L.LoadWorkspace(ctx, tx, false, (*[]*WorkspaceDevice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workspace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Workspace = nil
	if err = local.L.LoadWorkspace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workspace == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWorkspaceDeviceToOneSetOpDeviceUsingDevice(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WorkspaceDevice
	var b, c Device

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workspaceDeviceDBTypes, false, strmangle.SetComplement(workspaceDevicePrimaryKeyColumns, workspaceDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, deviceDBTypes, false, strmangle.SetComplement(devicePrimaryKeyColumns, deviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, deviceDBTypes, false, strmangle.SetComplement(devicePrimaryKeyColumns, deviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Device{&b, &c} {
		err = a.SetDevice(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Device != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorkspaceDevices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DeviceID != x.ID {
			t.Error("foreign key was wrong value", a.DeviceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DeviceID))
		reflect.Indirect(reflect.ValueOf(&a.DeviceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DeviceID != x.ID {
			t.Error("foreign key was wrong value", a.DeviceID, x.ID)
		}
	}
}
func testWorkspaceDeviceToOneSetOpWorkspaceUsingWorkspace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a WorkspaceDevice
	var b, c Workspace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, workspaceDeviceDBTypes, false, strmangle.SetComplement(workspaceDevicePrimaryKeyColumns, workspaceDeviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, workspaceDBTypes, false, strmangle.SetComplement(workspacePrimaryKeyColumns, workspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, workspaceDBTypes, false, strmangle.SetComplement(workspacePrimaryKeyColumns, workspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Workspace{&b, &c} {
		err = a.SetWorkspace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Workspace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WorkspaceDevices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WorkspaceID != x.ID {
			t.Error("foreign key was wrong value", a.WorkspaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WorkspaceID))
		reflect.Indirect(reflect.ValueOf(&a.WorkspaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WorkspaceID != x.ID {
			t.Error("foreign key was wrong value", a.WorkspaceID, x.ID)
		}
	}
}

func testWorkspaceDevicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkspaceDevicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WorkspaceDeviceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWorkspaceDevicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WorkspaceDevices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	workspaceDeviceDBTypes = map[string]string{`WorkspaceID`: `int`, `DeviceID`: `int`, `ID`: `int`}
	_                      = bytes.MinRead
)

func testWorkspaceDevicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(workspaceDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(workspaceDeviceAllColumns) == len(workspaceDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWorkspaceDevicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(workspaceDeviceAllColumns) == len(workspaceDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WorkspaceDevice{}
	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, workspaceDeviceDBTypes, true, workspaceDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(workspaceDeviceAllColumns, workspaceDevicePrimaryKeyColumns) {
		fields = workspaceDeviceAllColumns
	} else {
		fields = strmangle.SetComplement(
			workspaceDeviceAllColumns,
			workspaceDevicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WorkspaceDeviceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWorkspaceDevicesUpsert(t *testing.T) {
	t.Parallel()

	if len(workspaceDeviceAllColumns) == len(workspaceDevicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWorkspaceDeviceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WorkspaceDevice{}
	if err = randomize.Struct(seed, &o, workspaceDeviceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkspaceDevice: %s", err)
	}

	count, err := WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, workspaceDeviceDBTypes, false, workspaceDevicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WorkspaceDevice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WorkspaceDevice: %s", err)
	}

	count, err = WorkspaceDevices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
