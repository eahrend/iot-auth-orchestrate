// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testDevices(t *testing.T) {
	t.Parallel()

	query := Devices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testDevicesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDevicesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Devices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDevicesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testDevicesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := DeviceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Device exists: %s", err)
	}
	if !e {
		t.Errorf("Expected DeviceExists to return true, but got false.")
	}
}

func testDevicesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	deviceFound, err := FindDevice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if deviceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testDevicesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Devices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testDevicesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Devices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testDevicesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	deviceOne := &Device{}
	deviceTwo := &Device{}
	if err = randomize.Struct(seed, deviceOne, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTwo, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Devices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testDevicesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	deviceOne := &Device{}
	deviceTwo := &Device{}
	if err = randomize.Struct(seed, deviceOne, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}
	if err = randomize.Struct(seed, deviceTwo, deviceDBTypes, false, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = deviceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = deviceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func deviceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func deviceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Device) error {
	*o = Device{}
	return nil
}

func testDevicesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Device{}
	o := &Device{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, deviceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Device object: %s", err)
	}

	AddDeviceHook(boil.BeforeInsertHook, deviceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	deviceBeforeInsertHooks = []DeviceHook{}

	AddDeviceHook(boil.AfterInsertHook, deviceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	deviceAfterInsertHooks = []DeviceHook{}

	AddDeviceHook(boil.AfterSelectHook, deviceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	deviceAfterSelectHooks = []DeviceHook{}

	AddDeviceHook(boil.BeforeUpdateHook, deviceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	deviceBeforeUpdateHooks = []DeviceHook{}

	AddDeviceHook(boil.AfterUpdateHook, deviceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	deviceAfterUpdateHooks = []DeviceHook{}

	AddDeviceHook(boil.BeforeDeleteHook, deviceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	deviceBeforeDeleteHooks = []DeviceHook{}

	AddDeviceHook(boil.AfterDeleteHook, deviceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	deviceAfterDeleteHooks = []DeviceHook{}

	AddDeviceHook(boil.BeforeUpsertHook, deviceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	deviceBeforeUpsertHooks = []DeviceHook{}

	AddDeviceHook(boil.AfterUpsertHook, deviceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	deviceAfterUpsertHooks = []DeviceHook{}
}

func testDevicesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDevicesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(deviceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testDeviceToManyUserDevices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Device
	var b, c UserDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userDeviceDBTypes, false, userDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDeviceDBTypes, false, userDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DeviceID = a.ID
	c.DeviceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserDevices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DeviceID == b.DeviceID {
			bFound = true
		}
		if v.DeviceID == c.DeviceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DeviceSlice{&a}
	if err = a.L.LoadUserDevices(ctx, tx, false, (*[]*Device)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserDevices = nil
	if err = a.L.LoadUserDevices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDeviceToManyWorkspaceDevices(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Device
	var b, c WorkspaceDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, workspaceDeviceDBTypes, false, workspaceDeviceColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DeviceID = a.ID
	c.DeviceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WorkspaceDevices().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DeviceID == b.DeviceID {
			bFound = true
		}
		if v.DeviceID == c.DeviceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := DeviceSlice{&a}
	if err = a.L.LoadWorkspaceDevices(ctx, tx, false, (*[]*Device)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WorkspaceDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WorkspaceDevices = nil
	if err = a.L.LoadWorkspaceDevices(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WorkspaceDevices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testDeviceToManyAddOpUserDevices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Device
	var b, c, d, e UserDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceDBTypes, false, strmangle.SetComplement(devicePrimaryKeyColumns, deviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserDevice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userDeviceDBTypes, false, strmangle.SetComplement(userDevicePrimaryKeyColumns, userDeviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserDevice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserDevices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DeviceID {
			t.Error("foreign key was wrong value", a.ID, first.DeviceID)
		}
		if a.ID != second.DeviceID {
			t.Error("foreign key was wrong value", a.ID, second.DeviceID)
		}

		if first.R.Device != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Device != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserDevices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserDevices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserDevices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testDeviceToManyAddOpWorkspaceDevices(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Device
	var b, c, d, e WorkspaceDevice

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, deviceDBTypes, false, strmangle.SetComplement(devicePrimaryKeyColumns, deviceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*WorkspaceDevice{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, workspaceDeviceDBTypes, false, strmangle.SetComplement(workspaceDevicePrimaryKeyColumns, workspaceDeviceColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*WorkspaceDevice{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWorkspaceDevices(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DeviceID {
			t.Error("foreign key was wrong value", a.ID, first.DeviceID)
		}
		if a.ID != second.DeviceID {
			t.Error("foreign key was wrong value", a.ID, second.DeviceID)
		}

		if first.R.Device != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Device != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WorkspaceDevices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WorkspaceDevices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WorkspaceDevices().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testDevicesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDevicesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := DeviceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testDevicesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Devices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	deviceDBTypes = map[string]string{`ID`: `int`, `DeviceName`: `varchar`, `RegistryID`: `varchar`}
	_             = bytes.MinRead
)

func testDevicesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(deviceAllColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceDBTypes, true, devicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testDevicesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(deviceAllColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Device{}
	if err = randomize.Struct(seed, o, deviceDBTypes, true, deviceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, deviceDBTypes, true, devicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(deviceAllColumns, devicePrimaryKeyColumns) {
		fields = deviceAllColumns
	} else {
		fields = strmangle.SetComplement(
			deviceAllColumns,
			devicePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := DeviceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testDevicesUpsert(t *testing.T) {
	t.Parallel()

	if len(deviceAllColumns) == len(devicePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLDeviceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Device{}
	if err = randomize.Struct(seed, &o, deviceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Device: %s", err)
	}

	count, err := Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, deviceDBTypes, false, devicePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Device struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Device: %s", err)
	}

	count, err = Devices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
