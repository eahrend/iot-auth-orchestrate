// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WorkspaceDevice is an object representing the database table.
type WorkspaceDevice struct {
	WorkspaceID int `boil:"workspace_id" json:"workspace_id" toml:"workspace_id" yaml:"workspace_id"`
	DeviceID    int `boil:"device_id" json:"device_id" toml:"device_id" yaml:"device_id"`
	ID          int `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *workspaceDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workspaceDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkspaceDeviceColumns = struct {
	WorkspaceID string
	DeviceID    string
	ID          string
}{
	WorkspaceID: "workspace_id",
	DeviceID:    "device_id",
	ID:          "id",
}

// Generated where

var WorkspaceDeviceWhere = struct {
	WorkspaceID whereHelperint
	DeviceID    whereHelperint
	ID          whereHelperint
}{
	WorkspaceID: whereHelperint{field: "`workspace_devices`.`workspace_id`"},
	DeviceID:    whereHelperint{field: "`workspace_devices`.`device_id`"},
	ID:          whereHelperint{field: "`workspace_devices`.`id`"},
}

// WorkspaceDeviceRels is where relationship names are stored.
var WorkspaceDeviceRels = struct {
	Device    string
	Workspace string
}{
	Device:    "Device",
	Workspace: "Workspace",
}

// workspaceDeviceR is where relationships are stored.
type workspaceDeviceR struct {
	Device    *Device    `boil:"Device" json:"Device" toml:"Device" yaml:"Device"`
	Workspace *Workspace `boil:"Workspace" json:"Workspace" toml:"Workspace" yaml:"Workspace"`
}

// NewStruct creates a new relationship struct
func (*workspaceDeviceR) NewStruct() *workspaceDeviceR {
	return &workspaceDeviceR{}
}

// workspaceDeviceL is where Load methods for each relationship are stored.
type workspaceDeviceL struct{}

var (
	workspaceDeviceAllColumns            = []string{"workspace_id", "device_id", "id"}
	workspaceDeviceColumnsWithoutDefault = []string{"workspace_id", "device_id"}
	workspaceDeviceColumnsWithDefault    = []string{"id"}
	workspaceDevicePrimaryKeyColumns     = []string{"id"}
)

type (
	// WorkspaceDeviceSlice is an alias for a slice of pointers to WorkspaceDevice.
	// This should generally be used opposed to []WorkspaceDevice.
	WorkspaceDeviceSlice []*WorkspaceDevice
	// WorkspaceDeviceHook is the signature for custom WorkspaceDevice hook methods
	WorkspaceDeviceHook func(context.Context, boil.ContextExecutor, *WorkspaceDevice) error

	workspaceDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workspaceDeviceType                 = reflect.TypeOf(&WorkspaceDevice{})
	workspaceDeviceMapping              = queries.MakeStructMapping(workspaceDeviceType)
	workspaceDevicePrimaryKeyMapping, _ = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, workspaceDevicePrimaryKeyColumns)
	workspaceDeviceInsertCacheMut       sync.RWMutex
	workspaceDeviceInsertCache          = make(map[string]insertCache)
	workspaceDeviceUpdateCacheMut       sync.RWMutex
	workspaceDeviceUpdateCache          = make(map[string]updateCache)
	workspaceDeviceUpsertCacheMut       sync.RWMutex
	workspaceDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workspaceDeviceBeforeInsertHooks []WorkspaceDeviceHook
var workspaceDeviceBeforeUpdateHooks []WorkspaceDeviceHook
var workspaceDeviceBeforeDeleteHooks []WorkspaceDeviceHook
var workspaceDeviceBeforeUpsertHooks []WorkspaceDeviceHook

var workspaceDeviceAfterInsertHooks []WorkspaceDeviceHook
var workspaceDeviceAfterSelectHooks []WorkspaceDeviceHook
var workspaceDeviceAfterUpdateHooks []WorkspaceDeviceHook
var workspaceDeviceAfterDeleteHooks []WorkspaceDeviceHook
var workspaceDeviceAfterUpsertHooks []WorkspaceDeviceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WorkspaceDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WorkspaceDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WorkspaceDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WorkspaceDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WorkspaceDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WorkspaceDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WorkspaceDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WorkspaceDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WorkspaceDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkspaceDeviceHook registers your hook function for all future operations.
func AddWorkspaceDeviceHook(hookPoint boil.HookPoint, workspaceDeviceHook WorkspaceDeviceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workspaceDeviceBeforeInsertHooks = append(workspaceDeviceBeforeInsertHooks, workspaceDeviceHook)
	case boil.BeforeUpdateHook:
		workspaceDeviceBeforeUpdateHooks = append(workspaceDeviceBeforeUpdateHooks, workspaceDeviceHook)
	case boil.BeforeDeleteHook:
		workspaceDeviceBeforeDeleteHooks = append(workspaceDeviceBeforeDeleteHooks, workspaceDeviceHook)
	case boil.BeforeUpsertHook:
		workspaceDeviceBeforeUpsertHooks = append(workspaceDeviceBeforeUpsertHooks, workspaceDeviceHook)
	case boil.AfterInsertHook:
		workspaceDeviceAfterInsertHooks = append(workspaceDeviceAfterInsertHooks, workspaceDeviceHook)
	case boil.AfterSelectHook:
		workspaceDeviceAfterSelectHooks = append(workspaceDeviceAfterSelectHooks, workspaceDeviceHook)
	case boil.AfterUpdateHook:
		workspaceDeviceAfterUpdateHooks = append(workspaceDeviceAfterUpdateHooks, workspaceDeviceHook)
	case boil.AfterDeleteHook:
		workspaceDeviceAfterDeleteHooks = append(workspaceDeviceAfterDeleteHooks, workspaceDeviceHook)
	case boil.AfterUpsertHook:
		workspaceDeviceAfterUpsertHooks = append(workspaceDeviceAfterUpsertHooks, workspaceDeviceHook)
	}
}

// One returns a single workspaceDevice record from the query.
func (q workspaceDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WorkspaceDevice, error) {
	o := &WorkspaceDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for workspace_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WorkspaceDevice records from the query.
func (q workspaceDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkspaceDeviceSlice, error) {
	var o []*WorkspaceDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WorkspaceDevice slice")
	}

	if len(workspaceDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WorkspaceDevice records in the query.
func (q workspaceDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count workspace_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workspaceDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if workspace_devices exists")
	}

	return count > 0, nil
}

// Device pointed to by the foreign key.
func (o *WorkspaceDevice) Device(mods ...qm.QueryMod) deviceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DeviceID),
	}

	queryMods = append(queryMods, mods...)

	query := Devices(queryMods...)
	queries.SetFrom(query.Query, "`devices`")

	return query
}

// Workspace pointed to by the foreign key.
func (o *WorkspaceDevice) Workspace(mods ...qm.QueryMod) workspaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.WorkspaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Workspaces(queryMods...)
	queries.SetFrom(query.Query, "`workspaces`")

	return query
}

// LoadDevice allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workspaceDeviceL) LoadDevice(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspaceDevice interface{}, mods queries.Applicator) error {
	var slice []*WorkspaceDevice
	var object *WorkspaceDevice

	if singular {
		object = maybeWorkspaceDevice.(*WorkspaceDevice)
	} else {
		slice = *maybeWorkspaceDevice.(*[]*WorkspaceDevice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceDeviceR{}
		}
		args = append(args, object.DeviceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceDeviceR{}
			}

			for _, a := range args {
				if a == obj.DeviceID {
					continue Outer
				}
			}

			args = append(args, obj.DeviceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`devices`),
		qm.WhereIn(`devices.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Device")
	}

	var resultSlice []*Device
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Device")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for devices")
	}

	if len(workspaceDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Device = foreign
		if foreign.R == nil {
			foreign.R = &deviceR{}
		}
		foreign.R.WorkspaceDevices = append(foreign.R.WorkspaceDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeviceID == foreign.ID {
				local.R.Device = foreign
				if foreign.R == nil {
					foreign.R = &deviceR{}
				}
				foreign.R.WorkspaceDevices = append(foreign.R.WorkspaceDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkspace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (workspaceDeviceL) LoadWorkspace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspaceDevice interface{}, mods queries.Applicator) error {
	var slice []*WorkspaceDevice
	var object *WorkspaceDevice

	if singular {
		object = maybeWorkspaceDevice.(*WorkspaceDevice)
	} else {
		slice = *maybeWorkspaceDevice.(*[]*WorkspaceDevice)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceDeviceR{}
		}
		args = append(args, object.WorkspaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceDeviceR{}
			}

			for _, a := range args {
				if a == obj.WorkspaceID {
					continue Outer
				}
			}

			args = append(args, obj.WorkspaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`workspaces`),
		qm.WhereIn(`workspaces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workspace")
	}

	var resultSlice []*Workspace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workspace")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for workspaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for workspaces")
	}

	if len(workspaceDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Workspace = foreign
		if foreign.R == nil {
			foreign.R = &workspaceR{}
		}
		foreign.R.WorkspaceDevices = append(foreign.R.WorkspaceDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkspaceID == foreign.ID {
				local.R.Workspace = foreign
				if foreign.R == nil {
					foreign.R = &workspaceR{}
				}
				foreign.R.WorkspaceDevices = append(foreign.R.WorkspaceDevices, local)
				break
			}
		}
	}

	return nil
}

// SetDevice of the workspaceDevice to the related item.
// Sets o.R.Device to related.
// Adds o to related.R.WorkspaceDevices.
func (o *WorkspaceDevice) SetDevice(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Device) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `workspace_devices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"device_id"}),
		strmangle.WhereClause("`", "`", 0, workspaceDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeviceID = related.ID
	if o.R == nil {
		o.R = &workspaceDeviceR{
			Device: related,
		}
	} else {
		o.R.Device = related
	}

	if related.R == nil {
		related.R = &deviceR{
			WorkspaceDevices: WorkspaceDeviceSlice{o},
		}
	} else {
		related.R.WorkspaceDevices = append(related.R.WorkspaceDevices, o)
	}

	return nil
}

// SetWorkspace of the workspaceDevice to the related item.
// Sets o.R.Workspace to related.
// Adds o to related.R.WorkspaceDevices.
func (o *WorkspaceDevice) SetWorkspace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Workspace) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `workspace_devices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"workspace_id"}),
		strmangle.WhereClause("`", "`", 0, workspaceDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkspaceID = related.ID
	if o.R == nil {
		o.R = &workspaceDeviceR{
			Workspace: related,
		}
	} else {
		o.R.Workspace = related
	}

	if related.R == nil {
		related.R = &workspaceR{
			WorkspaceDevices: WorkspaceDeviceSlice{o},
		}
	} else {
		related.R.WorkspaceDevices = append(related.R.WorkspaceDevices, o)
	}

	return nil
}

// WorkspaceDevices retrieves all the records using an executor.
func WorkspaceDevices(mods ...qm.QueryMod) workspaceDeviceQuery {
	mods = append(mods, qm.From("`workspace_devices`"))
	return workspaceDeviceQuery{NewQuery(mods...)}
}

// FindWorkspaceDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkspaceDevice(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*WorkspaceDevice, error) {
	workspaceDeviceObj := &WorkspaceDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `workspace_devices` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workspaceDeviceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from workspace_devices")
	}

	return workspaceDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WorkspaceDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workspace_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workspaceDeviceInsertCacheMut.RLock()
	cache, cached := workspaceDeviceInsertCache[key]
	workspaceDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workspaceDeviceAllColumns,
			workspaceDeviceColumnsWithDefault,
			workspaceDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `workspace_devices` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `workspace_devices` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `workspace_devices` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, workspaceDevicePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into workspace_devices")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workspaceDeviceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workspace_devices")
	}

CacheNoHooks:
	if !cached {
		workspaceDeviceInsertCacheMut.Lock()
		workspaceDeviceInsertCache[key] = cache
		workspaceDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WorkspaceDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WorkspaceDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workspaceDeviceUpdateCacheMut.RLock()
	cache, cached := workspaceDeviceUpdateCache[key]
	workspaceDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workspaceDeviceAllColumns,
			workspaceDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update workspace_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `workspace_devices` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, workspaceDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, append(wl, workspaceDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update workspace_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for workspace_devices")
	}

	if !cached {
		workspaceDeviceUpdateCacheMut.Lock()
		workspaceDeviceUpdateCache[key] = cache
		workspaceDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workspaceDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for workspace_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for workspace_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkspaceDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspaceDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `workspace_devices` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspaceDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in workspaceDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all workspaceDevice")
	}
	return rowsAff, nil
}

var mySQLWorkspaceDeviceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WorkspaceDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workspace_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceDeviceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWorkspaceDeviceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workspaceDeviceUpsertCacheMut.RLock()
	cache, cached := workspaceDeviceUpsertCache[key]
	workspaceDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workspaceDeviceAllColumns,
			workspaceDeviceColumnsWithDefault,
			workspaceDeviceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workspaceDeviceAllColumns,
			workspaceDevicePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert workspace_devices, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "workspace_devices", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `workspace_devices` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for workspace_devices")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workspaceDeviceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(workspaceDeviceType, workspaceDeviceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for workspace_devices")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workspace_devices")
	}

CacheNoHooks:
	if !cached {
		workspaceDeviceUpsertCacheMut.Lock()
		workspaceDeviceUpsertCache[key] = cache
		workspaceDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WorkspaceDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WorkspaceDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WorkspaceDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workspaceDevicePrimaryKeyMapping)
	sql := "DELETE FROM `workspace_devices` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from workspace_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for workspace_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workspaceDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workspaceDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workspace_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workspace_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkspaceDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workspaceDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspaceDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `workspace_devices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspaceDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workspaceDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workspace_devices")
	}

	if len(workspaceDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WorkspaceDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkspaceDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkspaceDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkspaceDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspaceDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `workspace_devices`.* FROM `workspace_devices` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspaceDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkspaceDeviceSlice")
	}

	*o = slice

	return nil
}

// WorkspaceDeviceExists checks if the WorkspaceDevice row exists.
func WorkspaceDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `workspace_devices` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if workspace_devices exists")
	}

	return exists, nil
}
