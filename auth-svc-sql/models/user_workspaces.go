// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserWorkspace is an object representing the database table.
type UserWorkspace struct {
	UserID      int  `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	WorkspaceID int  `boil:"workspace_id" json:"workspace_id" toml:"workspace_id" yaml:"workspace_id"`
	RoleID      int  `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	ID          uint `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *userWorkspaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userWorkspaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserWorkspaceColumns = struct {
	UserID      string
	WorkspaceID string
	RoleID      string
	ID          string
}{
	UserID:      "user_id",
	WorkspaceID: "workspace_id",
	RoleID:      "role_id",
	ID:          "id",
}

// Generated where

type whereHelperuint struct{ field string }

func (w whereHelperuint) EQ(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint) NEQ(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint) LT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint) LTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint) GT(x uint) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint) GTE(x uint) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint) IN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint) NIN(slice []uint) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var UserWorkspaceWhere = struct {
	UserID      whereHelperint
	WorkspaceID whereHelperint
	RoleID      whereHelperint
	ID          whereHelperuint
}{
	UserID:      whereHelperint{field: "`user_workspaces`.`user_id`"},
	WorkspaceID: whereHelperint{field: "`user_workspaces`.`workspace_id`"},
	RoleID:      whereHelperint{field: "`user_workspaces`.`role_id`"},
	ID:          whereHelperuint{field: "`user_workspaces`.`id`"},
}

// UserWorkspaceRels is where relationship names are stored.
var UserWorkspaceRels = struct {
	Role      string
	User      string
	Workspace string
}{
	Role:      "Role",
	User:      "User",
	Workspace: "Workspace",
}

// userWorkspaceR is where relationships are stored.
type userWorkspaceR struct {
	Role      *Role      `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	User      *User      `boil:"User" json:"User" toml:"User" yaml:"User"`
	Workspace *Workspace `boil:"Workspace" json:"Workspace" toml:"Workspace" yaml:"Workspace"`
}

// NewStruct creates a new relationship struct
func (*userWorkspaceR) NewStruct() *userWorkspaceR {
	return &userWorkspaceR{}
}

// userWorkspaceL is where Load methods for each relationship are stored.
type userWorkspaceL struct{}

var (
	userWorkspaceAllColumns            = []string{"user_id", "workspace_id", "role_id", "id"}
	userWorkspaceColumnsWithoutDefault = []string{"user_id", "workspace_id", "role_id", "id"}
	userWorkspaceColumnsWithDefault    = []string{}
	userWorkspacePrimaryKeyColumns     = []string{"id"}
)

type (
	// UserWorkspaceSlice is an alias for a slice of pointers to UserWorkspace.
	// This should generally be used opposed to []UserWorkspace.
	UserWorkspaceSlice []*UserWorkspace
	// UserWorkspaceHook is the signature for custom UserWorkspace hook methods
	UserWorkspaceHook func(context.Context, boil.ContextExecutor, *UserWorkspace) error

	userWorkspaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userWorkspaceType                 = reflect.TypeOf(&UserWorkspace{})
	userWorkspaceMapping              = queries.MakeStructMapping(userWorkspaceType)
	userWorkspacePrimaryKeyMapping, _ = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, userWorkspacePrimaryKeyColumns)
	userWorkspaceInsertCacheMut       sync.RWMutex
	userWorkspaceInsertCache          = make(map[string]insertCache)
	userWorkspaceUpdateCacheMut       sync.RWMutex
	userWorkspaceUpdateCache          = make(map[string]updateCache)
	userWorkspaceUpsertCacheMut       sync.RWMutex
	userWorkspaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userWorkspaceBeforeInsertHooks []UserWorkspaceHook
var userWorkspaceBeforeUpdateHooks []UserWorkspaceHook
var userWorkspaceBeforeDeleteHooks []UserWorkspaceHook
var userWorkspaceBeforeUpsertHooks []UserWorkspaceHook

var userWorkspaceAfterInsertHooks []UserWorkspaceHook
var userWorkspaceAfterSelectHooks []UserWorkspaceHook
var userWorkspaceAfterUpdateHooks []UserWorkspaceHook
var userWorkspaceAfterDeleteHooks []UserWorkspaceHook
var userWorkspaceAfterUpsertHooks []UserWorkspaceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserWorkspace) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserWorkspace) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserWorkspace) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserWorkspace) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserWorkspace) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserWorkspace) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserWorkspace) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserWorkspace) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserWorkspace) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userWorkspaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserWorkspaceHook registers your hook function for all future operations.
func AddUserWorkspaceHook(hookPoint boil.HookPoint, userWorkspaceHook UserWorkspaceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userWorkspaceBeforeInsertHooks = append(userWorkspaceBeforeInsertHooks, userWorkspaceHook)
	case boil.BeforeUpdateHook:
		userWorkspaceBeforeUpdateHooks = append(userWorkspaceBeforeUpdateHooks, userWorkspaceHook)
	case boil.BeforeDeleteHook:
		userWorkspaceBeforeDeleteHooks = append(userWorkspaceBeforeDeleteHooks, userWorkspaceHook)
	case boil.BeforeUpsertHook:
		userWorkspaceBeforeUpsertHooks = append(userWorkspaceBeforeUpsertHooks, userWorkspaceHook)
	case boil.AfterInsertHook:
		userWorkspaceAfterInsertHooks = append(userWorkspaceAfterInsertHooks, userWorkspaceHook)
	case boil.AfterSelectHook:
		userWorkspaceAfterSelectHooks = append(userWorkspaceAfterSelectHooks, userWorkspaceHook)
	case boil.AfterUpdateHook:
		userWorkspaceAfterUpdateHooks = append(userWorkspaceAfterUpdateHooks, userWorkspaceHook)
	case boil.AfterDeleteHook:
		userWorkspaceAfterDeleteHooks = append(userWorkspaceAfterDeleteHooks, userWorkspaceHook)
	case boil.AfterUpsertHook:
		userWorkspaceAfterUpsertHooks = append(userWorkspaceAfterUpsertHooks, userWorkspaceHook)
	}
}

// One returns a single userWorkspace record from the query.
func (q userWorkspaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserWorkspace, error) {
	o := &UserWorkspace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_workspaces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserWorkspace records from the query.
func (q userWorkspaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserWorkspaceSlice, error) {
	var o []*UserWorkspace

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserWorkspace slice")
	}

	if len(userWorkspaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserWorkspace records in the query.
func (q userWorkspaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_workspaces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userWorkspaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_workspaces exists")
	}

	return count > 0, nil
}

// Role pointed to by the foreign key.
func (o *UserWorkspace) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`roles`")

	return query
}

// User pointed to by the foreign key.
func (o *UserWorkspace) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "`users`")

	return query
}

// Workspace pointed to by the foreign key.
func (o *UserWorkspace) Workspace(mods ...qm.QueryMod) workspaceQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.WorkspaceID),
	}

	queryMods = append(queryMods, mods...)

	query := Workspaces(queryMods...)
	queries.SetFrom(query.Query, "`workspaces`")

	return query
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userWorkspaceL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserWorkspace interface{}, mods queries.Applicator) error {
	var slice []*UserWorkspace
	var object *UserWorkspace

	if singular {
		object = maybeUserWorkspace.(*UserWorkspace)
	} else {
		slice = *maybeUserWorkspace.(*[]*UserWorkspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userWorkspaceR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userWorkspaceR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(userWorkspaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userWorkspaceL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserWorkspace interface{}, mods queries.Applicator) error {
	var slice []*UserWorkspace
	var object *UserWorkspace

	if singular {
		object = maybeUserWorkspace.(*UserWorkspace)
	} else {
		slice = *maybeUserWorkspace.(*[]*UserWorkspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userWorkspaceR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userWorkspaceR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userWorkspaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, local)
				break
			}
		}
	}

	return nil
}

// LoadWorkspace allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userWorkspaceL) LoadWorkspace(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserWorkspace interface{}, mods queries.Applicator) error {
	var slice []*UserWorkspace
	var object *UserWorkspace

	if singular {
		object = maybeUserWorkspace.(*UserWorkspace)
	} else {
		slice = *maybeUserWorkspace.(*[]*UserWorkspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userWorkspaceR{}
		}
		args = append(args, object.WorkspaceID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userWorkspaceR{}
			}

			for _, a := range args {
				if a == obj.WorkspaceID {
					continue Outer
				}
			}

			args = append(args, obj.WorkspaceID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`workspaces`),
		qm.WhereIn(`workspaces.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Workspace")
	}

	var resultSlice []*Workspace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Workspace")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for workspaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for workspaces")
	}

	if len(userWorkspaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Workspace = foreign
		if foreign.R == nil {
			foreign.R = &workspaceR{}
		}
		foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorkspaceID == foreign.ID {
				local.R.Workspace = foreign
				if foreign.R == nil {
					foreign.R = &workspaceR{}
				}
				foreign.R.UserWorkspaces = append(foreign.R.UserWorkspaces, local)
				break
			}
		}
	}

	return nil
}

// SetRole of the userWorkspace to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.UserWorkspaces.
func (o *UserWorkspace) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_workspaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role_id"}),
		strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &userWorkspaceR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			UserWorkspaces: UserWorkspaceSlice{o},
		}
	} else {
		related.R.UserWorkspaces = append(related.R.UserWorkspaces, o)
	}

	return nil
}

// SetUser of the userWorkspace to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserWorkspaces.
func (o *UserWorkspace) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_workspaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userWorkspaceR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserWorkspaces: UserWorkspaceSlice{o},
		}
	} else {
		related.R.UserWorkspaces = append(related.R.UserWorkspaces, o)
	}

	return nil
}

// SetWorkspace of the userWorkspace to the related item.
// Sets o.R.Workspace to related.
// Adds o to related.R.UserWorkspaces.
func (o *UserWorkspace) SetWorkspace(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Workspace) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user_workspaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"workspace_id"}),
		strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorkspaceID = related.ID
	if o.R == nil {
		o.R = &userWorkspaceR{
			Workspace: related,
		}
	} else {
		o.R.Workspace = related
	}

	if related.R == nil {
		related.R = &workspaceR{
			UserWorkspaces: UserWorkspaceSlice{o},
		}
	} else {
		related.R.UserWorkspaces = append(related.R.UserWorkspaces, o)
	}

	return nil
}

// UserWorkspaces retrieves all the records using an executor.
func UserWorkspaces(mods ...qm.QueryMod) userWorkspaceQuery {
	mods = append(mods, qm.From("`user_workspaces`"))
	return userWorkspaceQuery{NewQuery(mods...)}
}

// FindUserWorkspace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserWorkspace(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*UserWorkspace, error) {
	userWorkspaceObj := &UserWorkspace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_workspaces` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userWorkspaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_workspaces")
	}

	return userWorkspaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserWorkspace) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_workspaces provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userWorkspaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userWorkspaceInsertCacheMut.RLock()
	cache, cached := userWorkspaceInsertCache[key]
	userWorkspaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userWorkspaceAllColumns,
			userWorkspaceColumnsWithDefault,
			userWorkspaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_workspaces` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_workspaces` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_workspaces` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_workspaces")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_workspaces")
	}

CacheNoHooks:
	if !cached {
		userWorkspaceInsertCacheMut.Lock()
		userWorkspaceInsertCache[key] = cache
		userWorkspaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserWorkspace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserWorkspace) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userWorkspaceUpdateCacheMut.RLock()
	cache, cached := userWorkspaceUpdateCache[key]
	userWorkspaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userWorkspaceAllColumns,
			userWorkspacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_workspaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_workspaces` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, append(wl, userWorkspacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_workspaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_workspaces")
	}

	if !cached {
		userWorkspaceUpdateCacheMut.Lock()
		userWorkspaceUpdateCache[key] = cache
		userWorkspaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userWorkspaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_workspaces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserWorkspaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWorkspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_workspaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userWorkspacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userWorkspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userWorkspace")
	}
	return rowsAff, nil
}

var mySQLUserWorkspaceUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserWorkspace) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_workspaces provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userWorkspaceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserWorkspaceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userWorkspaceUpsertCacheMut.RLock()
	cache, cached := userWorkspaceUpsertCache[key]
	userWorkspaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userWorkspaceAllColumns,
			userWorkspaceColumnsWithDefault,
			userWorkspaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userWorkspaceAllColumns,
			userWorkspacePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert user_workspaces, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "user_workspaces", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_workspaces` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for user_workspaces")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userWorkspaceType, userWorkspaceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for user_workspaces")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for user_workspaces")
	}

CacheNoHooks:
	if !cached {
		userWorkspaceUpsertCacheMut.Lock()
		userWorkspaceUpsertCache[key] = cache
		userWorkspaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserWorkspace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserWorkspace) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserWorkspace provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userWorkspacePrimaryKeyMapping)
	sql := "DELETE FROM `user_workspaces` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_workspaces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userWorkspaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userWorkspaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_workspaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserWorkspaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userWorkspaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWorkspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_workspaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userWorkspacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userWorkspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_workspaces")
	}

	if len(userWorkspaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserWorkspace) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserWorkspace(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserWorkspaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserWorkspaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userWorkspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_workspaces`.* FROM `user_workspaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userWorkspacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserWorkspaceSlice")
	}

	*o = slice

	return nil
}

// UserWorkspaceExists checks if the UserWorkspace row exists.
func UserWorkspaceExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_workspaces` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_workspaces exists")
	}

	return exists, nil
}
