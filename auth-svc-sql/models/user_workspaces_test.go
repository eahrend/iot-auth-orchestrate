// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserWorkspaces(t *testing.T) {
	t.Parallel()

	query := UserWorkspaces()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserWorkspacesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserWorkspacesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserWorkspaces().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserWorkspacesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserWorkspaceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserWorkspacesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserWorkspaceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserWorkspace exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserWorkspaceExists to return true, but got false.")
	}
}

func testUserWorkspacesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userWorkspaceFound, err := FindUserWorkspace(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userWorkspaceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserWorkspacesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserWorkspaces().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserWorkspacesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserWorkspaces().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserWorkspacesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userWorkspaceOne := &UserWorkspace{}
	userWorkspaceTwo := &UserWorkspace{}
	if err = randomize.Struct(seed, userWorkspaceOne, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}
	if err = randomize.Struct(seed, userWorkspaceTwo, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userWorkspaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userWorkspaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserWorkspaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserWorkspacesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userWorkspaceOne := &UserWorkspace{}
	userWorkspaceTwo := &UserWorkspace{}
	if err = randomize.Struct(seed, userWorkspaceOne, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}
	if err = randomize.Struct(seed, userWorkspaceTwo, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userWorkspaceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userWorkspaceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userWorkspaceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func userWorkspaceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserWorkspace) error {
	*o = UserWorkspace{}
	return nil
}

func testUserWorkspacesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserWorkspace{}
	o := &UserWorkspace{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserWorkspace object: %s", err)
	}

	AddUserWorkspaceHook(boil.BeforeInsertHook, userWorkspaceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userWorkspaceBeforeInsertHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.AfterInsertHook, userWorkspaceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userWorkspaceAfterInsertHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.AfterSelectHook, userWorkspaceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userWorkspaceAfterSelectHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.BeforeUpdateHook, userWorkspaceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userWorkspaceBeforeUpdateHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.AfterUpdateHook, userWorkspaceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userWorkspaceAfterUpdateHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.BeforeDeleteHook, userWorkspaceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userWorkspaceBeforeDeleteHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.AfterDeleteHook, userWorkspaceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userWorkspaceAfterDeleteHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.BeforeUpsertHook, userWorkspaceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userWorkspaceBeforeUpsertHooks = []UserWorkspaceHook{}

	AddUserWorkspaceHook(boil.AfterUpsertHook, userWorkspaceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userWorkspaceAfterUpsertHooks = []UserWorkspaceHook{}
}

func testUserWorkspacesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserWorkspacesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userWorkspaceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserWorkspaceToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserWorkspace
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserWorkspaceSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*UserWorkspace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserWorkspaceToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserWorkspace
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserWorkspaceSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserWorkspace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserWorkspaceToOneWorkspaceUsingWorkspace(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserWorkspace
	var foreign Workspace

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userWorkspaceDBTypes, false, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, workspaceDBTypes, false, workspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Workspace struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.WorkspaceID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Workspace().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := UserWorkspaceSlice{&local}
	if err = local.L.LoadWorkspace(ctx, tx, false, (*[]*UserWorkspace)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workspace == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Workspace = nil
	if err = local.L.LoadWorkspace(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Workspace == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testUserWorkspaceToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserWorkspace
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userWorkspaceDBTypes, false, strmangle.SetComplement(userWorkspacePrimaryKeyColumns, userWorkspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserWorkspaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}
func testUserWorkspaceToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserWorkspace
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userWorkspaceDBTypes, false, strmangle.SetComplement(userWorkspacePrimaryKeyColumns, userWorkspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserWorkspaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testUserWorkspaceToOneSetOpWorkspaceUsingWorkspace(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserWorkspace
	var b, c Workspace

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userWorkspaceDBTypes, false, strmangle.SetComplement(userWorkspacePrimaryKeyColumns, userWorkspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, workspaceDBTypes, false, strmangle.SetComplement(workspacePrimaryKeyColumns, workspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, workspaceDBTypes, false, strmangle.SetComplement(workspacePrimaryKeyColumns, workspaceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Workspace{&b, &c} {
		err = a.SetWorkspace(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Workspace != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserWorkspaces[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.WorkspaceID != x.ID {
			t.Error("foreign key was wrong value", a.WorkspaceID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.WorkspaceID))
		reflect.Indirect(reflect.ValueOf(&a.WorkspaceID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.WorkspaceID != x.ID {
			t.Error("foreign key was wrong value", a.WorkspaceID, x.ID)
		}
	}
}

func testUserWorkspacesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserWorkspacesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserWorkspaceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserWorkspacesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserWorkspaces().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userWorkspaceDBTypes = map[string]string{`UserID`: `int`, `WorkspaceID`: `int`, `RoleID`: `int`, `ID`: `int`}
	_                    = bytes.MinRead
)

func testUserWorkspacesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userWorkspacePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userWorkspaceAllColumns) == len(userWorkspacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserWorkspacesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userWorkspaceAllColumns) == len(userWorkspacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserWorkspace{}
	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspaceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userWorkspaceDBTypes, true, userWorkspacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userWorkspaceAllColumns, userWorkspacePrimaryKeyColumns) {
		fields = userWorkspaceAllColumns
	} else {
		fields = strmangle.SetComplement(
			userWorkspaceAllColumns,
			userWorkspacePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserWorkspaceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserWorkspacesUpsert(t *testing.T) {
	t.Parallel()

	if len(userWorkspaceAllColumns) == len(userWorkspacePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserWorkspaceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserWorkspace{}
	if err = randomize.Struct(seed, &o, userWorkspaceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserWorkspace: %s", err)
	}

	count, err := UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userWorkspaceDBTypes, false, userWorkspacePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserWorkspace struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserWorkspace: %s", err)
	}

	count, err = UserWorkspaces().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
