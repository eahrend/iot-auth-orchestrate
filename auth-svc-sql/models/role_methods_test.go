// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoleMethods(t *testing.T) {
	t.Parallel()

	query := RoleMethods()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoleMethodsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMethodsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoleMethods().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMethodsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMethodSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoleMethodsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoleMethodExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if RoleMethod exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoleMethodExists to return true, but got false.")
	}
}

func testRoleMethodsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roleMethodFound, err := FindRoleMethod(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roleMethodFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoleMethodsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoleMethods().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoleMethodsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoleMethods().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoleMethodsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roleMethodOne := &RoleMethod{}
	roleMethodTwo := &RoleMethod{}
	if err = randomize.Struct(seed, roleMethodOne, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMethodTwo, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoleMethodsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roleMethodOne := &RoleMethod{}
	roleMethodTwo := &RoleMethod{}
	if err = randomize.Struct(seed, roleMethodOne, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}
	if err = randomize.Struct(seed, roleMethodTwo, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roleMethodOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roleMethodTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roleMethodBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func roleMethodAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoleMethod) error {
	*o = RoleMethod{}
	return nil
}

func testRoleMethodsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoleMethod{}
	o := &RoleMethod{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roleMethodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleMethod object: %s", err)
	}

	AddRoleMethodHook(boil.BeforeInsertHook, roleMethodBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roleMethodBeforeInsertHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.AfterInsertHook, roleMethodAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roleMethodAfterInsertHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.AfterSelectHook, roleMethodAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roleMethodAfterSelectHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.BeforeUpdateHook, roleMethodBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roleMethodBeforeUpdateHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.AfterUpdateHook, roleMethodAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roleMethodAfterUpdateHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.BeforeDeleteHook, roleMethodBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roleMethodBeforeDeleteHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.AfterDeleteHook, roleMethodAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roleMethodAfterDeleteHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.BeforeUpsertHook, roleMethodBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roleMethodBeforeUpsertHooks = []RoleMethodHook{}

	AddRoleMethodHook(boil.AfterUpsertHook, roleMethodAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roleMethodAfterUpsertHooks = []RoleMethodHook{}
}

func testRoleMethodsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMethodsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roleMethodColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoleMethodToOneMethodUsingMethod(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMethod
	var foreign Method

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, methodDBTypes, false, methodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Method struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.MethodID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Method().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMethodSlice{&local}
	if err = local.L.LoadMethod(ctx, tx, false, (*[]*RoleMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Method == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Method = nil
	if err = local.L.LoadMethod(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Method == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMethodToOneRoleUsingRole(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoleMethod
	var foreign Role

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roleMethodDBTypes, false, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roleDBTypes, false, roleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Role struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Role().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RoleMethodSlice{&local}
	if err = local.L.LoadRole(ctx, tx, false, (*[]*RoleMethod)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Role = nil
	if err = local.L.LoadRole(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Role == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRoleMethodToOneSetOpMethodUsingMethod(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMethod
	var b, c Method

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMethodDBTypes, false, strmangle.SetComplement(roleMethodPrimaryKeyColumns, roleMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, methodDBTypes, false, strmangle.SetComplement(methodPrimaryKeyColumns, methodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, methodDBTypes, false, strmangle.SetComplement(methodPrimaryKeyColumns, methodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Method{&b, &c} {
		err = a.SetMethod(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Method != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMethods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.MethodID != x.ID {
			t.Error("foreign key was wrong value", a.MethodID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.MethodID))
		reflect.Indirect(reflect.ValueOf(&a.MethodID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.MethodID != x.ID {
			t.Error("foreign key was wrong value", a.MethodID, x.ID)
		}
	}
}
func testRoleMethodToOneSetOpRoleUsingRole(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoleMethod
	var b, c Role

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roleMethodDBTypes, false, strmangle.SetComplement(roleMethodPrimaryKeyColumns, roleMethodColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roleDBTypes, false, strmangle.SetComplement(rolePrimaryKeyColumns, roleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Role{&b, &c} {
		err = a.SetRole(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Role != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoleMethods[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoleID))
		reflect.Indirect(reflect.ValueOf(&a.RoleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RoleID != x.ID {
			t.Error("foreign key was wrong value", a.RoleID, x.ID)
		}
	}
}

func testRoleMethodsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMethodsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoleMethodSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoleMethodsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoleMethods().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roleMethodDBTypes = map[string]string{`RoleID`: `int`, `MethodID`: `int`, `ID`: `int`}
	_                 = bytes.MinRead
)

func testRoleMethodsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roleMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roleMethodAllColumns) == len(roleMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoleMethodsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roleMethodAllColumns) == len(roleMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoleMethod{}
	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roleMethodDBTypes, true, roleMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roleMethodAllColumns, roleMethodPrimaryKeyColumns) {
		fields = roleMethodAllColumns
	} else {
		fields = strmangle.SetComplement(
			roleMethodAllColumns,
			roleMethodPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoleMethodSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoleMethodsUpsert(t *testing.T) {
	t.Parallel()

	if len(roleMethodAllColumns) == len(roleMethodPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRoleMethodUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoleMethod{}
	if err = randomize.Struct(seed, &o, roleMethodDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMethod: %s", err)
	}

	count, err := RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roleMethodDBTypes, false, roleMethodPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoleMethod struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoleMethod: %s", err)
	}

	count, err = RoleMethods().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
