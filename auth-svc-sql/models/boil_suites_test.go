// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Devices", testDevices)
	t.Run("Methods", testMethods)
	t.Run("RoleMethods", testRoleMethods)
	t.Run("Roles", testRoles)
	t.Run("UserDevices", testUserDevices)
	t.Run("UserWorkspaces", testUserWorkspaces)
	t.Run("Users", testUsers)
	t.Run("WorkspaceDevices", testWorkspaceDevices)
	t.Run("Workspaces", testWorkspaces)
}

func TestDelete(t *testing.T) {
	t.Run("Devices", testDevicesDelete)
	t.Run("Methods", testMethodsDelete)
	t.Run("RoleMethods", testRoleMethodsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("UserDevices", testUserDevicesDelete)
	t.Run("UserWorkspaces", testUserWorkspacesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("WorkspaceDevices", testWorkspaceDevicesDelete)
	t.Run("Workspaces", testWorkspacesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Devices", testDevicesQueryDeleteAll)
	t.Run("Methods", testMethodsQueryDeleteAll)
	t.Run("RoleMethods", testRoleMethodsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("UserDevices", testUserDevicesQueryDeleteAll)
	t.Run("UserWorkspaces", testUserWorkspacesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("WorkspaceDevices", testWorkspaceDevicesQueryDeleteAll)
	t.Run("Workspaces", testWorkspacesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Devices", testDevicesSliceDeleteAll)
	t.Run("Methods", testMethodsSliceDeleteAll)
	t.Run("RoleMethods", testRoleMethodsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("UserDevices", testUserDevicesSliceDeleteAll)
	t.Run("UserWorkspaces", testUserWorkspacesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("WorkspaceDevices", testWorkspaceDevicesSliceDeleteAll)
	t.Run("Workspaces", testWorkspacesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Devices", testDevicesExists)
	t.Run("Methods", testMethodsExists)
	t.Run("RoleMethods", testRoleMethodsExists)
	t.Run("Roles", testRolesExists)
	t.Run("UserDevices", testUserDevicesExists)
	t.Run("UserWorkspaces", testUserWorkspacesExists)
	t.Run("Users", testUsersExists)
	t.Run("WorkspaceDevices", testWorkspaceDevicesExists)
	t.Run("Workspaces", testWorkspacesExists)
}

func TestFind(t *testing.T) {
	t.Run("Devices", testDevicesFind)
	t.Run("Methods", testMethodsFind)
	t.Run("RoleMethods", testRoleMethodsFind)
	t.Run("Roles", testRolesFind)
	t.Run("UserDevices", testUserDevicesFind)
	t.Run("UserWorkspaces", testUserWorkspacesFind)
	t.Run("Users", testUsersFind)
	t.Run("WorkspaceDevices", testWorkspaceDevicesFind)
	t.Run("Workspaces", testWorkspacesFind)
}

func TestBind(t *testing.T) {
	t.Run("Devices", testDevicesBind)
	t.Run("Methods", testMethodsBind)
	t.Run("RoleMethods", testRoleMethodsBind)
	t.Run("Roles", testRolesBind)
	t.Run("UserDevices", testUserDevicesBind)
	t.Run("UserWorkspaces", testUserWorkspacesBind)
	t.Run("Users", testUsersBind)
	t.Run("WorkspaceDevices", testWorkspaceDevicesBind)
	t.Run("Workspaces", testWorkspacesBind)
}

func TestOne(t *testing.T) {
	t.Run("Devices", testDevicesOne)
	t.Run("Methods", testMethodsOne)
	t.Run("RoleMethods", testRoleMethodsOne)
	t.Run("Roles", testRolesOne)
	t.Run("UserDevices", testUserDevicesOne)
	t.Run("UserWorkspaces", testUserWorkspacesOne)
	t.Run("Users", testUsersOne)
	t.Run("WorkspaceDevices", testWorkspaceDevicesOne)
	t.Run("Workspaces", testWorkspacesOne)
}

func TestAll(t *testing.T) {
	t.Run("Devices", testDevicesAll)
	t.Run("Methods", testMethodsAll)
	t.Run("RoleMethods", testRoleMethodsAll)
	t.Run("Roles", testRolesAll)
	t.Run("UserDevices", testUserDevicesAll)
	t.Run("UserWorkspaces", testUserWorkspacesAll)
	t.Run("Users", testUsersAll)
	t.Run("WorkspaceDevices", testWorkspaceDevicesAll)
	t.Run("Workspaces", testWorkspacesAll)
}

func TestCount(t *testing.T) {
	t.Run("Devices", testDevicesCount)
	t.Run("Methods", testMethodsCount)
	t.Run("RoleMethods", testRoleMethodsCount)
	t.Run("Roles", testRolesCount)
	t.Run("UserDevices", testUserDevicesCount)
	t.Run("UserWorkspaces", testUserWorkspacesCount)
	t.Run("Users", testUsersCount)
	t.Run("WorkspaceDevices", testWorkspaceDevicesCount)
	t.Run("Workspaces", testWorkspacesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Devices", testDevicesHooks)
	t.Run("Methods", testMethodsHooks)
	t.Run("RoleMethods", testRoleMethodsHooks)
	t.Run("Roles", testRolesHooks)
	t.Run("UserDevices", testUserDevicesHooks)
	t.Run("UserWorkspaces", testUserWorkspacesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("WorkspaceDevices", testWorkspaceDevicesHooks)
	t.Run("Workspaces", testWorkspacesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Devices", testDevicesInsert)
	t.Run("Devices", testDevicesInsertWhitelist)
	t.Run("Methods", testMethodsInsert)
	t.Run("Methods", testMethodsInsertWhitelist)
	t.Run("RoleMethods", testRoleMethodsInsert)
	t.Run("RoleMethods", testRoleMethodsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("UserDevices", testUserDevicesInsert)
	t.Run("UserDevices", testUserDevicesInsertWhitelist)
	t.Run("UserWorkspaces", testUserWorkspacesInsert)
	t.Run("UserWorkspaces", testUserWorkspacesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("WorkspaceDevices", testWorkspaceDevicesInsert)
	t.Run("WorkspaceDevices", testWorkspaceDevicesInsertWhitelist)
	t.Run("Workspaces", testWorkspacesInsert)
	t.Run("Workspaces", testWorkspacesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("RoleMethodToMethodUsingMethod", testRoleMethodToOneMethodUsingMethod)
	t.Run("RoleMethodToRoleUsingRole", testRoleMethodToOneRoleUsingRole)
	t.Run("RoleToWorkspaceUsingWorkspace", testRoleToOneWorkspaceUsingWorkspace)
	t.Run("UserDeviceToDeviceUsingDevice", testUserDeviceToOneDeviceUsingDevice)
	t.Run("UserDeviceToUserUsingUser", testUserDeviceToOneUserUsingUser)
	t.Run("UserWorkspaceToRoleUsingRole", testUserWorkspaceToOneRoleUsingRole)
	t.Run("UserWorkspaceToUserUsingUser", testUserWorkspaceToOneUserUsingUser)
	t.Run("UserWorkspaceToWorkspaceUsingWorkspace", testUserWorkspaceToOneWorkspaceUsingWorkspace)
	t.Run("WorkspaceDeviceToDeviceUsingDevice", testWorkspaceDeviceToOneDeviceUsingDevice)
	t.Run("WorkspaceDeviceToWorkspaceUsingWorkspace", testWorkspaceDeviceToOneWorkspaceUsingWorkspace)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("DeviceToUserDevices", testDeviceToManyUserDevices)
	t.Run("DeviceToWorkspaceDevices", testDeviceToManyWorkspaceDevices)
	t.Run("MethodToRoleMethods", testMethodToManyRoleMethods)
	t.Run("RoleToRoleMethods", testRoleToManyRoleMethods)
	t.Run("RoleToUserWorkspaces", testRoleToManyUserWorkspaces)
	t.Run("UserToUserDevices", testUserToManyUserDevices)
	t.Run("UserToUserWorkspaces", testUserToManyUserWorkspaces)
	t.Run("WorkspaceToRoles", testWorkspaceToManyRoles)
	t.Run("WorkspaceToUserWorkspaces", testWorkspaceToManyUserWorkspaces)
	t.Run("WorkspaceToWorkspaceDevices", testWorkspaceToManyWorkspaceDevices)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("RoleMethodToMethodUsingRoleMethods", testRoleMethodToOneSetOpMethodUsingMethod)
	t.Run("RoleMethodToRoleUsingRoleMethods", testRoleMethodToOneSetOpRoleUsingRole)
	t.Run("RoleToWorkspaceUsingRoles", testRoleToOneSetOpWorkspaceUsingWorkspace)
	t.Run("UserDeviceToDeviceUsingUserDevices", testUserDeviceToOneSetOpDeviceUsingDevice)
	t.Run("UserDeviceToUserUsingUserDevices", testUserDeviceToOneSetOpUserUsingUser)
	t.Run("UserWorkspaceToRoleUsingUserWorkspaces", testUserWorkspaceToOneSetOpRoleUsingRole)
	t.Run("UserWorkspaceToUserUsingUserWorkspaces", testUserWorkspaceToOneSetOpUserUsingUser)
	t.Run("UserWorkspaceToWorkspaceUsingUserWorkspaces", testUserWorkspaceToOneSetOpWorkspaceUsingWorkspace)
	t.Run("WorkspaceDeviceToDeviceUsingWorkspaceDevices", testWorkspaceDeviceToOneSetOpDeviceUsingDevice)
	t.Run("WorkspaceDeviceToWorkspaceUsingWorkspaceDevices", testWorkspaceDeviceToOneSetOpWorkspaceUsingWorkspace)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("DeviceToUserDevices", testDeviceToManyAddOpUserDevices)
	t.Run("DeviceToWorkspaceDevices", testDeviceToManyAddOpWorkspaceDevices)
	t.Run("MethodToRoleMethods", testMethodToManyAddOpRoleMethods)
	t.Run("RoleToRoleMethods", testRoleToManyAddOpRoleMethods)
	t.Run("RoleToUserWorkspaces", testRoleToManyAddOpUserWorkspaces)
	t.Run("UserToUserDevices", testUserToManyAddOpUserDevices)
	t.Run("UserToUserWorkspaces", testUserToManyAddOpUserWorkspaces)
	t.Run("WorkspaceToRoles", testWorkspaceToManyAddOpRoles)
	t.Run("WorkspaceToUserWorkspaces", testWorkspaceToManyAddOpUserWorkspaces)
	t.Run("WorkspaceToWorkspaceDevices", testWorkspaceToManyAddOpWorkspaceDevices)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Devices", testDevicesReload)
	t.Run("Methods", testMethodsReload)
	t.Run("RoleMethods", testRoleMethodsReload)
	t.Run("Roles", testRolesReload)
	t.Run("UserDevices", testUserDevicesReload)
	t.Run("UserWorkspaces", testUserWorkspacesReload)
	t.Run("Users", testUsersReload)
	t.Run("WorkspaceDevices", testWorkspaceDevicesReload)
	t.Run("Workspaces", testWorkspacesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Devices", testDevicesReloadAll)
	t.Run("Methods", testMethodsReloadAll)
	t.Run("RoleMethods", testRoleMethodsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("UserDevices", testUserDevicesReloadAll)
	t.Run("UserWorkspaces", testUserWorkspacesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("WorkspaceDevices", testWorkspaceDevicesReloadAll)
	t.Run("Workspaces", testWorkspacesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Devices", testDevicesSelect)
	t.Run("Methods", testMethodsSelect)
	t.Run("RoleMethods", testRoleMethodsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("UserDevices", testUserDevicesSelect)
	t.Run("UserWorkspaces", testUserWorkspacesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("WorkspaceDevices", testWorkspaceDevicesSelect)
	t.Run("Workspaces", testWorkspacesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Devices", testDevicesUpdate)
	t.Run("Methods", testMethodsUpdate)
	t.Run("RoleMethods", testRoleMethodsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("UserDevices", testUserDevicesUpdate)
	t.Run("UserWorkspaces", testUserWorkspacesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("WorkspaceDevices", testWorkspaceDevicesUpdate)
	t.Run("Workspaces", testWorkspacesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Devices", testDevicesSliceUpdateAll)
	t.Run("Methods", testMethodsSliceUpdateAll)
	t.Run("RoleMethods", testRoleMethodsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("UserDevices", testUserDevicesSliceUpdateAll)
	t.Run("UserWorkspaces", testUserWorkspacesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("WorkspaceDevices", testWorkspaceDevicesSliceUpdateAll)
	t.Run("Workspaces", testWorkspacesSliceUpdateAll)
}
