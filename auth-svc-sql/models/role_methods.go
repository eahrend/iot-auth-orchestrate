// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoleMethod is an object representing the database table.
type RoleMethod struct {
	RoleID   int `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	MethodID int `boil:"method_id" json:"method_id" toml:"method_id" yaml:"method_id"`
	ID       int `boil:"id" json:"id" toml:"id" yaml:"id"`

	R *roleMethodR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMethodL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMethodColumns = struct {
	RoleID   string
	MethodID string
	ID       string
}{
	RoleID:   "role_id",
	MethodID: "method_id",
	ID:       "id",
}

// Generated where

var RoleMethodWhere = struct {
	RoleID   whereHelperint
	MethodID whereHelperint
	ID       whereHelperint
}{
	RoleID:   whereHelperint{field: "`role_methods`.`role_id`"},
	MethodID: whereHelperint{field: "`role_methods`.`method_id`"},
	ID:       whereHelperint{field: "`role_methods`.`id`"},
}

// RoleMethodRels is where relationship names are stored.
var RoleMethodRels = struct {
	Method string
	Role   string
}{
	Method: "Method",
	Role:   "Role",
}

// roleMethodR is where relationships are stored.
type roleMethodR struct {
	Method *Method `boil:"Method" json:"Method" toml:"Method" yaml:"Method"`
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
}

// NewStruct creates a new relationship struct
func (*roleMethodR) NewStruct() *roleMethodR {
	return &roleMethodR{}
}

// roleMethodL is where Load methods for each relationship are stored.
type roleMethodL struct{}

var (
	roleMethodAllColumns            = []string{"role_id", "method_id", "id"}
	roleMethodColumnsWithoutDefault = []string{"role_id", "method_id"}
	roleMethodColumnsWithDefault    = []string{"id"}
	roleMethodPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoleMethodSlice is an alias for a slice of pointers to RoleMethod.
	// This should generally be used opposed to []RoleMethod.
	RoleMethodSlice []*RoleMethod
	// RoleMethodHook is the signature for custom RoleMethod hook methods
	RoleMethodHook func(context.Context, boil.ContextExecutor, *RoleMethod) error

	roleMethodQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMethodType                 = reflect.TypeOf(&RoleMethod{})
	roleMethodMapping              = queries.MakeStructMapping(roleMethodType)
	roleMethodPrimaryKeyMapping, _ = queries.BindMapping(roleMethodType, roleMethodMapping, roleMethodPrimaryKeyColumns)
	roleMethodInsertCacheMut       sync.RWMutex
	roleMethodInsertCache          = make(map[string]insertCache)
	roleMethodUpdateCacheMut       sync.RWMutex
	roleMethodUpdateCache          = make(map[string]updateCache)
	roleMethodUpsertCacheMut       sync.RWMutex
	roleMethodUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleMethodBeforeInsertHooks []RoleMethodHook
var roleMethodBeforeUpdateHooks []RoleMethodHook
var roleMethodBeforeDeleteHooks []RoleMethodHook
var roleMethodBeforeUpsertHooks []RoleMethodHook

var roleMethodAfterInsertHooks []RoleMethodHook
var roleMethodAfterSelectHooks []RoleMethodHook
var roleMethodAfterUpdateHooks []RoleMethodHook
var roleMethodAfterDeleteHooks []RoleMethodHook
var roleMethodAfterUpsertHooks []RoleMethodHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleMethod) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleMethod) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleMethod) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleMethod) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleMethod) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleMethod) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleMethod) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleMethod) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleMethod) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roleMethodAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleMethodHook registers your hook function for all future operations.
func AddRoleMethodHook(hookPoint boil.HookPoint, roleMethodHook RoleMethodHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roleMethodBeforeInsertHooks = append(roleMethodBeforeInsertHooks, roleMethodHook)
	case boil.BeforeUpdateHook:
		roleMethodBeforeUpdateHooks = append(roleMethodBeforeUpdateHooks, roleMethodHook)
	case boil.BeforeDeleteHook:
		roleMethodBeforeDeleteHooks = append(roleMethodBeforeDeleteHooks, roleMethodHook)
	case boil.BeforeUpsertHook:
		roleMethodBeforeUpsertHooks = append(roleMethodBeforeUpsertHooks, roleMethodHook)
	case boil.AfterInsertHook:
		roleMethodAfterInsertHooks = append(roleMethodAfterInsertHooks, roleMethodHook)
	case boil.AfterSelectHook:
		roleMethodAfterSelectHooks = append(roleMethodAfterSelectHooks, roleMethodHook)
	case boil.AfterUpdateHook:
		roleMethodAfterUpdateHooks = append(roleMethodAfterUpdateHooks, roleMethodHook)
	case boil.AfterDeleteHook:
		roleMethodAfterDeleteHooks = append(roleMethodAfterDeleteHooks, roleMethodHook)
	case boil.AfterUpsertHook:
		roleMethodAfterUpsertHooks = append(roleMethodAfterUpsertHooks, roleMethodHook)
	}
}

// One returns a single roleMethod record from the query.
func (q roleMethodQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoleMethod, error) {
	o := &RoleMethod{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for role_methods")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all RoleMethod records from the query.
func (q roleMethodQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoleMethodSlice, error) {
	var o []*RoleMethod

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to RoleMethod slice")
	}

	if len(roleMethodAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all RoleMethod records in the query.
func (q roleMethodQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count role_methods rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roleMethodQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if role_methods exists")
	}

	return count > 0, nil
}

// Method pointed to by the foreign key.
func (o *RoleMethod) Method(mods ...qm.QueryMod) methodQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.MethodID),
	}

	queryMods = append(queryMods, mods...)

	query := Methods(queryMods...)
	queries.SetFrom(query.Query, "`methods`")

	return query
}

// Role pointed to by the foreign key.
func (o *RoleMethod) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`roles`")

	return query
}

// LoadMethod allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMethodL) LoadMethod(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMethod interface{}, mods queries.Applicator) error {
	var slice []*RoleMethod
	var object *RoleMethod

	if singular {
		object = maybeRoleMethod.(*RoleMethod)
	} else {
		slice = *maybeRoleMethod.(*[]*RoleMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleMethodR{}
		}
		args = append(args, object.MethodID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMethodR{}
			}

			for _, a := range args {
				if a == obj.MethodID {
					continue Outer
				}
			}

			args = append(args, obj.MethodID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`methods`),
		qm.WhereIn(`methods.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Method")
	}

	var resultSlice []*Method
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Method")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for methods")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for methods")
	}

	if len(roleMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Method = foreign
		if foreign.R == nil {
			foreign.R = &methodR{}
		}
		foreign.R.RoleMethods = append(foreign.R.RoleMethods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MethodID == foreign.ID {
				local.R.Method = foreign
				if foreign.R == nil {
					foreign.R = &methodR{}
				}
				foreign.R.RoleMethods = append(foreign.R.RoleMethods, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMethodL) LoadRole(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoleMethod interface{}, mods queries.Applicator) error {
	var slice []*RoleMethod
	var object *RoleMethod

	if singular {
		object = maybeRoleMethod.(*RoleMethod)
	} else {
		slice = *maybeRoleMethod.(*[]*RoleMethod)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roleMethodR{}
		}
		args = append(args, object.RoleID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMethodR{}
			}

			for _, a := range args {
				if a == obj.RoleID {
					continue Outer
				}
			}

			args = append(args, obj.RoleID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleMethodAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleMethods = append(foreign.R.RoleMethods, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleMethods = append(foreign.R.RoleMethods, local)
				break
			}
		}
	}

	return nil
}

// SetMethod of the roleMethod to the related item.
// Sets o.R.Method to related.
// Adds o to related.R.RoleMethods.
func (o *RoleMethod) SetMethod(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Method) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `role_methods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"method_id"}),
		strmangle.WhereClause("`", "`", 0, roleMethodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MethodID = related.ID
	if o.R == nil {
		o.R = &roleMethodR{
			Method: related,
		}
	} else {
		o.R.Method = related
	}

	if related.R == nil {
		related.R = &methodR{
			RoleMethods: RoleMethodSlice{o},
		}
	} else {
		related.R.RoleMethods = append(related.R.RoleMethods, o)
	}

	return nil
}

// SetRole of the roleMethod to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleMethods.
func (o *RoleMethod) SetRole(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `role_methods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"role_id"}),
		strmangle.WhereClause("`", "`", 0, roleMethodPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleMethodR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleMethods: RoleMethodSlice{o},
		}
	} else {
		related.R.RoleMethods = append(related.R.RoleMethods, o)
	}

	return nil
}

// RoleMethods retrieves all the records using an executor.
func RoleMethods(mods ...qm.QueryMod) roleMethodQuery {
	mods = append(mods, qm.From("`role_methods`"))
	return roleMethodQuery{NewQuery(mods...)}
}

// FindRoleMethod retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMethod(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RoleMethod, error) {
	roleMethodObj := &RoleMethod{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `role_methods` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roleMethodObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from role_methods")
	}

	return roleMethodObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleMethod) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_methods provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMethodColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleMethodInsertCacheMut.RLock()
	cache, cached := roleMethodInsertCache[key]
	roleMethodInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleMethodAllColumns,
			roleMethodColumnsWithDefault,
			roleMethodColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleMethodType, roleMethodMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMethodType, roleMethodMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `role_methods` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `role_methods` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `role_methods` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, roleMethodPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into role_methods")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roleMethodMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for role_methods")
	}

CacheNoHooks:
	if !cached {
		roleMethodInsertCacheMut.Lock()
		roleMethodInsertCache[key] = cache
		roleMethodInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the RoleMethod.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleMethod) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleMethodUpdateCacheMut.RLock()
	cache, cached := roleMethodUpdateCache[key]
	roleMethodUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleMethodAllColumns,
			roleMethodPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update role_methods, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `role_methods` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, roleMethodPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMethodType, roleMethodMapping, append(wl, roleMethodPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update role_methods row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for role_methods")
	}

	if !cached {
		roleMethodUpdateCacheMut.Lock()
		roleMethodUpdateCache[key] = cache
		roleMethodUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roleMethodQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for role_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for role_methods")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMethodSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `role_methods` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleMethodPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in roleMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all roleMethod")
	}
	return rowsAff, nil
}

var mySQLRoleMethodUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleMethod) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no role_methods provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMethodColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRoleMethodUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMethodUpsertCacheMut.RLock()
	cache, cached := roleMethodUpsertCache[key]
	roleMethodUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roleMethodAllColumns,
			roleMethodColumnsWithDefault,
			roleMethodColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roleMethodAllColumns,
			roleMethodPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert role_methods, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "role_methods", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `role_methods` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(roleMethodType, roleMethodMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMethodType, roleMethodMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for role_methods")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roleMethodMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(roleMethodType, roleMethodMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for role_methods")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for role_methods")
	}

CacheNoHooks:
	if !cached {
		roleMethodUpsertCacheMut.Lock()
		roleMethodUpsertCache[key] = cache
		roleMethodUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single RoleMethod record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMethod) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no RoleMethod provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMethodPrimaryKeyMapping)
	sql := "DELETE FROM `role_methods` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from role_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for role_methods")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roleMethodQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no roleMethodQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from role_methods")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_methods")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMethodSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleMethodBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `role_methods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleMethodPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from roleMethod slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for role_methods")
	}

	if len(roleMethodAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMethod) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoleMethod(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMethodSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleMethodSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMethodPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `role_methods`.* FROM `role_methods` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roleMethodPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RoleMethodSlice")
	}

	*o = slice

	return nil
}

// RoleMethodExists checks if the RoleMethod row exists.
func RoleMethodExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `role_methods` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if role_methods exists")
	}

	return exists, nil
}
