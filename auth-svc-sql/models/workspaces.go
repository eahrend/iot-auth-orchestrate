// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Workspace is an object representing the database table.
type Workspace struct {
	ID            int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	WorkspaceName string `boil:"workspace_name" json:"workspace_name" toml:"workspace_name" yaml:"workspace_name"`

	R *workspaceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L workspaceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WorkspaceColumns = struct {
	ID            string
	WorkspaceName string
}{
	ID:            "id",
	WorkspaceName: "workspace_name",
}

// Generated where

var WorkspaceWhere = struct {
	ID            whereHelperint
	WorkspaceName whereHelperstring
}{
	ID:            whereHelperint{field: "`workspaces`.`id`"},
	WorkspaceName: whereHelperstring{field: "`workspaces`.`workspace_name`"},
}

// WorkspaceRels is where relationship names are stored.
var WorkspaceRels = struct {
	Roles            string
	UserWorkspaces   string
	WorkspaceDevices string
}{
	Roles:            "Roles",
	UserWorkspaces:   "UserWorkspaces",
	WorkspaceDevices: "WorkspaceDevices",
}

// workspaceR is where relationships are stored.
type workspaceR struct {
	Roles            RoleSlice            `boil:"Roles" json:"Roles" toml:"Roles" yaml:"Roles"`
	UserWorkspaces   UserWorkspaceSlice   `boil:"UserWorkspaces" json:"UserWorkspaces" toml:"UserWorkspaces" yaml:"UserWorkspaces"`
	WorkspaceDevices WorkspaceDeviceSlice `boil:"WorkspaceDevices" json:"WorkspaceDevices" toml:"WorkspaceDevices" yaml:"WorkspaceDevices"`
}

// NewStruct creates a new relationship struct
func (*workspaceR) NewStruct() *workspaceR {
	return &workspaceR{}
}

// workspaceL is where Load methods for each relationship are stored.
type workspaceL struct{}

var (
	workspaceAllColumns            = []string{"id", "workspace_name"}
	workspaceColumnsWithoutDefault = []string{"workspace_name"}
	workspaceColumnsWithDefault    = []string{"id"}
	workspacePrimaryKeyColumns     = []string{"id"}
)

type (
	// WorkspaceSlice is an alias for a slice of pointers to Workspace.
	// This should generally be used opposed to []Workspace.
	WorkspaceSlice []*Workspace
	// WorkspaceHook is the signature for custom Workspace hook methods
	WorkspaceHook func(context.Context, boil.ContextExecutor, *Workspace) error

	workspaceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	workspaceType                 = reflect.TypeOf(&Workspace{})
	workspaceMapping              = queries.MakeStructMapping(workspaceType)
	workspacePrimaryKeyMapping, _ = queries.BindMapping(workspaceType, workspaceMapping, workspacePrimaryKeyColumns)
	workspaceInsertCacheMut       sync.RWMutex
	workspaceInsertCache          = make(map[string]insertCache)
	workspaceUpdateCacheMut       sync.RWMutex
	workspaceUpdateCache          = make(map[string]updateCache)
	workspaceUpsertCacheMut       sync.RWMutex
	workspaceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var workspaceBeforeInsertHooks []WorkspaceHook
var workspaceBeforeUpdateHooks []WorkspaceHook
var workspaceBeforeDeleteHooks []WorkspaceHook
var workspaceBeforeUpsertHooks []WorkspaceHook

var workspaceAfterInsertHooks []WorkspaceHook
var workspaceAfterSelectHooks []WorkspaceHook
var workspaceAfterUpdateHooks []WorkspaceHook
var workspaceAfterDeleteHooks []WorkspaceHook
var workspaceAfterUpsertHooks []WorkspaceHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Workspace) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Workspace) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Workspace) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Workspace) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Workspace) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Workspace) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Workspace) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Workspace) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Workspace) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range workspaceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWorkspaceHook registers your hook function for all future operations.
func AddWorkspaceHook(hookPoint boil.HookPoint, workspaceHook WorkspaceHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		workspaceBeforeInsertHooks = append(workspaceBeforeInsertHooks, workspaceHook)
	case boil.BeforeUpdateHook:
		workspaceBeforeUpdateHooks = append(workspaceBeforeUpdateHooks, workspaceHook)
	case boil.BeforeDeleteHook:
		workspaceBeforeDeleteHooks = append(workspaceBeforeDeleteHooks, workspaceHook)
	case boil.BeforeUpsertHook:
		workspaceBeforeUpsertHooks = append(workspaceBeforeUpsertHooks, workspaceHook)
	case boil.AfterInsertHook:
		workspaceAfterInsertHooks = append(workspaceAfterInsertHooks, workspaceHook)
	case boil.AfterSelectHook:
		workspaceAfterSelectHooks = append(workspaceAfterSelectHooks, workspaceHook)
	case boil.AfterUpdateHook:
		workspaceAfterUpdateHooks = append(workspaceAfterUpdateHooks, workspaceHook)
	case boil.AfterDeleteHook:
		workspaceAfterDeleteHooks = append(workspaceAfterDeleteHooks, workspaceHook)
	case boil.AfterUpsertHook:
		workspaceAfterUpsertHooks = append(workspaceAfterUpsertHooks, workspaceHook)
	}
}

// One returns a single workspace record from the query.
func (q workspaceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Workspace, error) {
	o := &Workspace{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for workspaces")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Workspace records from the query.
func (q workspaceQuery) All(ctx context.Context, exec boil.ContextExecutor) (WorkspaceSlice, error) {
	var o []*Workspace

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Workspace slice")
	}

	if len(workspaceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Workspace records in the query.
func (q workspaceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count workspaces rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q workspaceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if workspaces exists")
	}

	return count > 0, nil
}

// Roles retrieves all the role's Roles with an executor.
func (o *Workspace) Roles(mods ...qm.QueryMod) roleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`roles`.`workspace_id`=?", o.ID),
	)

	query := Roles(queryMods...)
	queries.SetFrom(query.Query, "`roles`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`roles`.*"})
	}

	return query
}

// UserWorkspaces retrieves all the user_workspace's UserWorkspaces with an executor.
func (o *Workspace) UserWorkspaces(mods ...qm.QueryMod) userWorkspaceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user_workspaces`.`workspace_id`=?", o.ID),
	)

	query := UserWorkspaces(queryMods...)
	queries.SetFrom(query.Query, "`user_workspaces`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`user_workspaces`.*"})
	}

	return query
}

// WorkspaceDevices retrieves all the workspace_device's WorkspaceDevices with an executor.
func (o *Workspace) WorkspaceDevices(mods ...qm.QueryMod) workspaceDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`workspace_devices`.`workspace_id`=?", o.ID),
	)

	query := WorkspaceDevices(queryMods...)
	queries.SetFrom(query.Query, "`workspace_devices`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`workspace_devices`.*"})
	}

	return query
}

// LoadRoles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadRoles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.workspace_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load roles")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice roles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Roles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.Roles = append(local.R.Roles, foreign)
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// LoadUserWorkspaces allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadUserWorkspaces(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_workspaces`),
		qm.WhereIn(`user_workspaces.workspace_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_workspaces")
	}

	var resultSlice []*UserWorkspace
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_workspaces")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_workspaces")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_workspaces")
	}

	if len(userWorkspaceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserWorkspaces = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userWorkspaceR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.UserWorkspaces = append(local.R.UserWorkspaces, foreign)
				if foreign.R == nil {
					foreign.R = &userWorkspaceR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// LoadWorkspaceDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (workspaceL) LoadWorkspaceDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWorkspace interface{}, mods queries.Applicator) error {
	var slice []*Workspace
	var object *Workspace

	if singular {
		object = maybeWorkspace.(*Workspace)
	} else {
		slice = *maybeWorkspace.(*[]*Workspace)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &workspaceR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &workspaceR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`workspace_devices`),
		qm.WhereIn(`workspace_devices.workspace_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load workspace_devices")
	}

	var resultSlice []*WorkspaceDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice workspace_devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on workspace_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for workspace_devices")
	}

	if len(workspaceDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WorkspaceDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &workspaceDeviceR{}
			}
			foreign.R.Workspace = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WorkspaceID {
				local.R.WorkspaceDevices = append(local.R.WorkspaceDevices, foreign)
				if foreign.R == nil {
					foreign.R = &workspaceDeviceR{}
				}
				foreign.R.Workspace = local
				break
			}
		}
	}

	return nil
}

// AddRoles adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.Roles.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddRoles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Role) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `roles` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"workspace_id"}),
				strmangle.WhereClause("`", "`", 0, rolePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			Roles: related,
		}
	} else {
		o.R.Roles = append(o.R.Roles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// AddUserWorkspaces adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.UserWorkspaces.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddUserWorkspaces(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserWorkspace) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user_workspaces` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"workspace_id"}),
				strmangle.WhereClause("`", "`", 0, userWorkspacePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			UserWorkspaces: related,
		}
	} else {
		o.R.UserWorkspaces = append(o.R.UserWorkspaces, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userWorkspaceR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// AddWorkspaceDevices adds the given related objects to the existing relationships
// of the workspace, optionally inserting them as new records.
// Appends related to o.R.WorkspaceDevices.
// Sets related.R.Workspace appropriately.
func (o *Workspace) AddWorkspaceDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*WorkspaceDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WorkspaceID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `workspace_devices` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"workspace_id"}),
				strmangle.WhereClause("`", "`", 0, workspaceDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WorkspaceID = o.ID
		}
	}

	if o.R == nil {
		o.R = &workspaceR{
			WorkspaceDevices: related,
		}
	} else {
		o.R.WorkspaceDevices = append(o.R.WorkspaceDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &workspaceDeviceR{
				Workspace: o,
			}
		} else {
			rel.R.Workspace = o
		}
	}
	return nil
}

// Workspaces retrieves all the records using an executor.
func Workspaces(mods ...qm.QueryMod) workspaceQuery {
	mods = append(mods, qm.From("`workspaces`"))
	return workspaceQuery{NewQuery(mods...)}
}

// FindWorkspace retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWorkspace(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Workspace, error) {
	workspaceObj := &Workspace{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `workspaces` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, workspaceObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from workspaces")
	}

	return workspaceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Workspace) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workspaces provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	workspaceInsertCacheMut.RLock()
	cache, cached := workspaceInsertCache[key]
	workspaceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			workspaceAllColumns,
			workspaceColumnsWithDefault,
			workspaceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(workspaceType, workspaceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `workspaces` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `workspaces` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `workspaces` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, workspacePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into workspaces")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workspaceMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workspaces")
	}

CacheNoHooks:
	if !cached {
		workspaceInsertCacheMut.Lock()
		workspaceInsertCache[key] = cache
		workspaceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Workspace.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Workspace) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	workspaceUpdateCacheMut.RLock()
	cache, cached := workspaceUpdateCache[key]
	workspaceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			workspaceAllColumns,
			workspacePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update workspaces, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `workspaces` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, workspacePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, append(wl, workspacePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update workspaces row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for workspaces")
	}

	if !cached {
		workspaceUpdateCacheMut.Lock()
		workspaceUpdateCache[key] = cache
		workspaceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q workspaceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for workspaces")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WorkspaceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `workspaces` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspacePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in workspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all workspace")
	}
	return rowsAff, nil
}

var mySQLWorkspaceUniqueColumns = []string{
	"id",
	"workspace_name",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Workspace) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no workspaces provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(workspaceColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWorkspaceUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	workspaceUpsertCacheMut.RLock()
	cache, cached := workspaceUpsertCache[key]
	workspaceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			workspaceAllColumns,
			workspaceColumnsWithDefault,
			workspaceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			workspaceAllColumns,
			workspacePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert workspaces, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "workspaces", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `workspaces` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(workspaceType, workspaceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(workspaceType, workspaceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for workspaces")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == workspaceMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(workspaceType, workspaceMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for workspaces")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for workspaces")
	}

CacheNoHooks:
	if !cached {
		workspaceUpsertCacheMut.Lock()
		workspaceUpsertCache[key] = cache
		workspaceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Workspace record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Workspace) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Workspace provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), workspacePrimaryKeyMapping)
	sql := "DELETE FROM `workspaces` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for workspaces")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q workspaceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no workspaceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workspaces")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workspaces")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WorkspaceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(workspaceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `workspaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspacePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from workspace slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for workspaces")
	}

	if len(workspaceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Workspace) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWorkspace(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WorkspaceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WorkspaceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), workspacePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `workspaces`.* FROM `workspaces` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, workspacePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WorkspaceSlice")
	}

	*o = slice

	return nil
}

// WorkspaceExists checks if the Workspace row exists.
func WorkspaceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `workspaces` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if workspaces exists")
	}

	return exists, nil
}
